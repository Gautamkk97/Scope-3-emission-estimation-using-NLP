{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "731f6fb5-c593-4666-beae-395b7de86a83",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from transformers import AdamW, get_linear_schedule_with_warmup\n",
    "from sentence_transformers import SentenceTransformer, InputExample, losses\n",
    "from torch.utils.data import DataLoader\n",
    "import numpy as np\n",
    "\n",
    "# Set random seed for reproducibility\n",
    "torch.manual_seed(42)\n",
    "np.random.seed(42)\n",
    "\n",
    "# Load USEEIO dataset\n",
    "def load_useeio_data(file_path):\n",
    "    # Placeholder for loading the USEEIO dataset\n",
    "    # The dataset should be preprocessed and returned as a list of InputExample objects\n",
    "    # Each InputExample should contain text data and corresponding label\n",
    "    data = []\n",
    "    # Implement dataset loading and preprocessing\n",
    "    return data\n",
    "\n",
    "# Define SBERT model and configurations\n",
    "model_name = 'distilbert-base-nli-mean-tokens'\n",
    "model = SentenceTransformer(model_name)\n",
    "\n",
    "# Define hyperparameters\n",
    "batch_size = 16\n",
    "max_seq_length = 256\n",
    "learning_rate = 0.002\n",
    "num_epochs = 12\n",
    "dropout_rate = 0.5\n",
    "\n",
    "# Load dataset\n",
    "train_data = load_useeio_data('path/to/train_data.csv')\n",
    "train_dataloader = DataLoader(train_data, shuffle=True, batch_size=batch_size)\n",
    "\n",
    "# Define loss function\n",
    "train_loss = losses.CosineSimilarityLoss(model=model)\n",
    "\n",
    "# Prepare optimizer and schedule (linear warmup and decay)\n",
    "optimizer = AdamW(model.parameters(), lr=learning_rate)\n",
    "total_steps = len(train_dataloader) * num_epochs\n",
    "scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=0, num_training_steps=total_steps)\n",
    "\n",
    "# Define training function\n",
    "def train_model(model, train_dataloader, optimizer, scheduler, num_epochs):\n",
    "    model.train()\n",
    "    for epoch in range(num_epochs):\n",
    "        epoch_loss = 0\n",
    "        for step, batch in enumerate(train_dataloader):\n",
    "            optimizer.zero_grad()\n",
    "            inputs = batch['texts']\n",
    "            labels = batch['labels']\n",
    "            outputs = model(inputs)\n",
    "            loss = train_loss(outputs, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            scheduler.step()\n",
    "            epoch_loss += loss.item()\n",
    "        \n",
    "        print(f\"Epoch {epoch + 1}/{num_epochs}, Loss: {epoch_loss/len(train_dataloader)}\")\n",
    "\n",
    "# Fine-tune model\n",
    "def fine_tune_model(model, train_dataloader, num_epochs):\n",
    "    # Freeze lower layers\n",
    "    for param in model.base_model.embeddings.parameters():\n",
    "        param.requires_grad = False\n",
    "    for param in model.base_model.encoder.layer[:6].parameters():\n",
    "        param.requires_grad = False\n",
    "\n",
    "    # Train upper layers\n",
    "    train_model(model, train_dataloader, optimizer, scheduler, num_epochs)\n",
    "\n",
    "# Training and fine-tuning\n",
    "fine_tune_model(model, train_dataloader, num_epochs)\n",
    "\n",
    "# Save the fine-tuned model\n",
    "model.save('path/to/save/fine_tuned_model')\n",
    "\n",
    "# Function to evaluate model performance\n",
    "def evaluate_model(model, test_dataloader):\n",
    "    model.eval()\n",
    "    with torch.no_grad():\n",
    "        correct = 0\n",
    "        total = 0\n",
    "        for batch in test_dataloader:\n",
    "            inputs = batch['texts']\n",
    "            labels = batch['labels']\n",
    "            outputs = model(inputs)\n",
    "            predictions = outputs.argmax(dim=1)\n",
    "            correct += (predictions == labels).sum().item()\n",
    "            total += labels.size(0)\n",
    "    accuracy = correct / total\n",
    "    print(f\"Test Accuracy: {accuracy * 100:.2f}%\")\n",
    "\n",
    "# Load test dataset\n",
    "test_data = load_useeio_data('path/to/test_data.csv')\n",
    "test_dataloader = DataLoader(test_data, shuffle=False, batch_size=batch_size)\n",
    "\n",
    "# Evaluate fine-tuned model\n",
    "evaluate_model(model, test_dataloader)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
