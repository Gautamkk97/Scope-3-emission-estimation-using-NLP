{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46600baf-3c4c-47f1-bd42-bb94e2d9f871",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from fuzzywuzzy import process, fuzz\n",
    "\n",
    "# Load datasets (replace 'path_to_financial_ledger.csv' and 'path_to_useeio.csv' with actual paths)\n",
    "financial_ledger_df = pd.read_csv('finLedger.csv')\n",
    "useeio_df = pd.read_csv('useeio.csv')\n",
    "\n",
    "# Display initial information about the datasets\n",
    "print(\"Financial Ledger Dataset Info:\")\n",
    "print(financial_ledger_df.info())\n",
    "print(\"\\nUSEEIO Dataset Info:\")\n",
    "print(useeio_df.info())\n",
    "\n",
    "# Domain Mapping\n",
    "# Assuming 'description' in financial_ledger_df and 'sector' in useeio_df are the columns to be mapped\n",
    "ledger_descriptions = financial_ledger_df['description'].astype(str).tolist()\n",
    "useeio_sectors = useeio_df['sector'].astype(str).tolist()\n",
    "\n",
    "# Function to perform fuzzy matching\n",
    "def fuzzy_match(query, choices, scorer=fuzz.token_sort_ratio, cutoff=80):\n",
    "    matches = process.extract(query, choices, scorer=scorer)\n",
    "    best_match, score = matches[0]\n",
    "    if score >= cutoff:\n",
    "        return best_match\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "# Apply fuzzy matching to map ledger descriptions to USEEIO sectors\n",
    "mapped_sectors = []\n",
    "for desc in ledger_descriptions:\n",
    "    best_match = fuzzy_match(desc, useeio_sectors)\n",
    "    mapped_sectors.append(best_match)\n",
    "\n",
    "financial_ledger_df['mapped_sector'] = mapped_sectors\n",
    "\n",
    "# Display the first few rows to verify the mappings\n",
    "print(\"\\nFinancial Ledger with Mapped Sectors:\")\n",
    "print(financial_ledger_df.head())\n",
    "\n",
    "# Feature Engineering\n",
    "# Ensure the financial data aligns with USEEIO dataset features\n",
    "\n",
    "# Example: Standardize numerical columns and encode categorical columns\n",
    "numerical_features = ['amount']  # Replace with actual numerical features\n",
    "categorical_features = ['mapped_sector']\n",
    "\n",
    "# Standardize numerical features\n",
    "scaler = StandardScaler()\n",
    "financial_ledger_df[numerical_features] = scaler.fit_transform(financial_ledger_df[numerical_features])\n",
    "\n",
    "# Encode categorical features\n",
    "label_encoder = LabelEncoder()\n",
    "financial_ledger_df[categorical_features] = financial_ledger_df[categorical_features].apply(label_encoder.fit_transform)\n",
    "\n",
    "# Prepare the final adapted dataset\n",
    "adapted_financial_ledger_df = financial_ledger_df.copy()\n",
    "adapted_financial_ledger_df = adapted_financial_ledger_df[numerical_features + categorical_features]\n",
    "\n",
    "# Display the final adapted dataset\n",
    "print(\"\\nAdapted Financial Ledger Dataset:\")\n",
    "print(adapted_financial_ledger_df.head())\n",
    "\n",
    "# Save the adapted dataset\n",
    "adapted_financial_ledger_df.to_csv('adapted_financial_ledger.csv', index=False)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
